package utils

import (
	"encoding/binary"
	"reflect"
	"testing"
)

func TestEC(t *testing.T) {
	rule := map[byte][2]byte{
		0x02: {0x1B, 0xE7},
		0x03: {0x1B, 0xE8},
		0x1B: {0x1B, 0x00},
	}
	ec := NewEC([]byte{0x02}, []byte{0x03}, rule, nil)

	tests := []struct {
		name string
		data []byte
		want []byte
	}{
		{
			"test1",
			[]byte{0x5B, 0x1B, 0x02, 0x5B, 0x32, 0x4F, 0x31, 0x0D, 0x03},
			[]byte{0x02, 0x5B, 0x1B, 0x00, 0x1B, 0xE7, 0x5B, 0x32, 0x4F, 0x31, 0x0D, 0x1B, 0xE8, 0x03},
		},
		{
			"test2",
			[]byte{0x1B, 0x02, 0x5B, 0x32, 0x4F, 0x31, 0x0D, 0x03},
			[]byte{0x02, 0x1B, 0x00, 0x1B, 0xE7, 0x5B, 0x32, 0x4F, 0x31, 0x0D, 0x1B, 0xE8, 0x03},
		},
		{
			"test3",
			[]byte{0x02, 0x1B, 0x5B, 0x32, 0x4F, 0x31, 0x0D, 0x03},
			[]byte{0x02, 0x1B, 0xE7, 0x1B, 0x00, 0x5B, 0x32, 0x4F, 0x31, 0x0D, 0x1B, 0xE8, 0x03},
		},
		{
			"test4",
			[]byte{0x32, 0x02, 0x1B, 0x5B, 0x32, 0x4F, 0x31, 0x0D, 0x03},
			[]byte{0x02, 0x32, 0x1B, 0xE7, 0x1B, 0x00, 0x5B, 0x32, 0x4F, 0x31, 0x0D, 0x1B, 0xE8, 0x03},
		},
		{
			"test5",
			[]byte{0x5B, 0x1B, 0x02, 0x5B, 0x32, 0x4F, 0x31, 0x0D, 0x03, 0x0D},
			[]byte{0x02, 0x5B, 0x1B, 0x00, 0x1B, 0xE7, 0x5B, 0x32, 0x4F, 0x31, 0x0D, 0x1B, 0xE8, 0x0D, 0x03},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := ec.Escape(tt.data)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("escape() = %v, want %v", got, tt.want)
			}
			got2, err := ec.Unescape(got)
			if err != nil || !reflect.DeepEqual(got2, tt.data) {
				t.Errorf("Unescape() = %v, want %v", got2, tt.data)
			}
		})
	}
}

func TestEC_checksum(t *testing.T) {
	rule := map[byte][2]byte{
		0xE1: {0x1E, 0xE2},
		0xE2: {0x1D, 0xE2},
		0xE3: {0x1C, 0xE2},
	}
	checksum := func(buf []byte) []byte {
		var result uint16
		for _, c := range buf {
			result += uint16(c)
		}
		crc := make([]byte, 2)
		binary.LittleEndian.PutUint16(crc, result)
		return crc
	}

	ec := NewEC([]byte{0xE1}, []byte{0xE3}, rule, checksum)

	tests := []struct {
		name string
		data []byte
		want []byte
	}{
		{
			"test1",
			[]byte{0x2, 0x1, 0x24, 0x3, 0x4, 0xF6, 0x0, 0x14, 0xB, 0x6, 0xB, 0x2A, 0x1F, 0x5, 0x2C, 0x1, 0x6, 0x1, 0xDF, 0x0, 0xCA, 0x0, 0xAE, 0x1, 0x48, 0x0, 0x8, 0x0, 0x46, 0x1, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1E, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xF2, 0x0, 0x91, 0x0, 0x2C, 0x1, 0x28, 0x0, 0x7, 0x0, 0xCA, 0x0, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x32, 0x1, 0x6, 0x0, 0x16, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x43, 0x0, 0x34, 0x0, 0xB8, 0x1, 0x9D, 0x0, 0x27, 0x0, 0x16, 0x1, 0x9D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xE, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x89, 0x0, 0x7A, 0x0, 0xB8, 0x1, 0x5C, 0x0, 0x15, 0x0, 0x40, 0x1, 0x5C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x14, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x58, 0x0, 0x59, 0x0, 0xCC, 0x1, 0x55, 0x0, 0x1E, 0x0, 0x69, 0x1, 0x51, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0xA7, 0x1, 0x4, 0x0, 0x14, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0xE3, 0x0, 0xA3, 0x0, 0x90, 0x1, 0xA, 0x0, 0x3, 0x0, 0x1, 0x1, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			[]byte{0xE1, 0x02, 0x01, 0x24, 0x03, 0x04, 0xF6, 0x00, 0x14, 0x0B, 0x06, 0x0B, 0x2A, 0x1F, 0x05, 0x2C, 0x01, 0x06, 0x01, 0xDF, 0x00, 0xCA, 0x00, 0xAE, 0x01, 0x48, 0x00, 0x08, 0x00, 0x46, 0x01, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x00, 0x91, 0x00, 0x2C, 0x01, 0x28, 0x00, 0x07, 0x00, 0xCA, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x32, 0x01, 0x06, 0x00, 0x16, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x43, 0x00, 0x34, 0x00, 0xB8, 0x01, 0x9D, 0x00, 0x27, 0x00, 0x16, 0x01, 0x9D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x89, 0x00, 0x7A, 0x00, 0xB8, 0x01, 0x5C, 0x00, 0x15, 0x00, 0x40, 0x01, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x58, 0x00, 0x59, 0x00, 0xCC, 0x01, 0x55, 0x00, 0x1E, 0x00, 0x69, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xA7, 0x01, 0x04, 0x00, 0x14, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x1C, 0xE2, 0x00, 0xA3, 0x00, 0x90, 0x01, 0x0A, 0x00, 0x03, 0x00, 0x01, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x13, 0xE3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := ec.Escape(tt.data)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("escape() err: \n got = %v\nwant = %v", got, tt.want)
			}
			got2, err := ec.Unescape(got)
			if err != nil || !reflect.DeepEqual(got2, tt.data) {
				t.Errorf("Unescape() = %v, want %v", got2, tt.data)
			}
		})
	}
}
